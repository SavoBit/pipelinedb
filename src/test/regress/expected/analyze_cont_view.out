-- Sanity checks
CREATE STREAM analyze_cont_stream ();
CREATE CONTINUOUS VIEW cqanalyze0 AS SELECT substring(url::text, 1, 2) FROM analyze_cont_stream;
CREATE CONTINUOUS VIEW cqanalyze1 AS SELECT CASE WHEN x::text = '1' THEN 1 END FROM analyze_cont_stream;
CREATE CONTINUOUS VIEW cqanalyze2 AS SELECT a::integer FROM analyze_cont_stream GROUP BY a;
CREATE CONTINUOUS VIEW cqanalyze3 AS SELECT a::integer FROM analyze_cont_stream WHERE a > 10 GROUP BY a;
CREATE CONTINUOUS VIEW cqanalyze4 AS SELECT a::integer, b::integer FROM analyze_cont_stream WHERE a > 10 GROUP BY a, b, c HAVING a < 12 AND c::integer > 2;
ERROR:  continuous queries don't support HAVING clauses
HINT:  Try using a WHERE clause on the continuous view instead.
CREATE CONTINUOUS VIEW cqanalyze5 AS SELECT substring(url::text, 1, 2) AS g, COUNT(*) FROM analyze_cont_stream GROUP BY g;
CREATE CONTINUOUS VIEW cqanalyze6 AS SELECT s.id::integer FROM analyze_cont_stream s WHERE s.id < 10 AND s.value::integer > 10;
-- Verify that we can infer types for columns appearing outside of the target list
CREATE CONTINUOUS VIEW cqanalyze7 AS SELECT id::integer FROM analyze_cont_stream ORDER BY f::integer DESC;
ERROR:  continuous queries don't support ORDER BY
CREATE CONTINUOUS VIEW cqanalyze8 AS SELECT id::integer FROM analyze_cont_stream GROUP BY id, url::text;
CREATE CONTINUOUS VIEW cqanalyze9 AS SELECT a::integer, b::integer FROM analyze_cont_stream WHERE a > 10 GROUP BY a, b, c HAVING a < 12 AND c::integer > 2;
ERROR:  continuous queries don't support HAVING clauses
HINT:  Try using a WHERE clause on the continuous view instead.
-- Windows
CREATE CONTINUOUS VIEW cqanalyze10 AS SELECT ts::timestamp, SUM(val::numeric) OVER (ORDER BY ts) FROM analyze_cont_stream;
CREATE CONTINUOUS VIEW cqanalyze11 AS SELECT ts::timestamp, AVG(val::numeric) OVER (PARTITION BY ts ORDER BY ts) FROM analyze_cont_stream;
CREATE CONTINUOUS VIEW cqanalyze12 AS SELECT ts::timestamp, AVG(val::numeric) OVER (PARTITION BY ts ORDER BY (ts + INTERVAL '1 day')) FROM analyze_cont_stream;
CREATE CONTINUOUS VIEW cqanalyze13 AS SELECT ts::text, AVG(val::numeric) OVER (ORDER BY ts) FROM analyze_cont_stream;
ERROR:  ORDER BY expression for WINDOWs must evaluate to datetime type category values
-- Stream-table JOINs
CREATE TABLE t0 (id INTEGER);
CREATE STREAM s0 ();
CREATE CONTINUOUS VIEW cqanalyze16 AS SELECT s0.id::integer AS s0_id, t0.id AS t0_id FROM s0 JOIN t0 ON s0.id = t0.id;
NOTICE:  consider creating an index on t0.id for improved stream-table join performance
CREATE STREAM analyze_cont_stream2 ();
CREATE CONTINUOUS VIEW cqanalyze17 AS SELECT s.x::integer, t0.id FROM analyze_cont_stream2 s JOIN t0 ON s.x = t0.id;
NOTICE:  consider creating an index on t0.id for improved stream-table join performance
-- Now let's verify our error handling and messages
-- Stream column doesn't have a type
CREATE CONTINUOUS VIEW cqanalyze23 AS SELECT col FROM analyze_cont_stream;
ERROR:  column reference "col" has an ambiguous type
LINE 1: CREATE CONTINUOUS VIEW cqanalyze23 AS SELECT col FROM analyz...
                                                     ^
HINT:  Explicitly cast to the desired type, e.g. col::integer, or create the stream "analyze_cont_stream" with CREATE STREAM.
-- Column not qualified with a stream
CREATE STREAM s1 ();
CREATE CONTINUOUS VIEW cqanalyze24 AS SELECT id::integer FROM t0, s1;
ERROR:  column reference is ambiguous
LINE 1: CREATE CONTINUOUS VIEW cqanalyze24 AS SELECT id::integer FRO...
                                                     ^
-- Column has multiple types
CREATE CONTINUOUS VIEW cqanalyze25 AS SELECT id::integer AS id0, id::text AS id1 FROM analyze_cont_stream;
ERROR:  column has an ambiguous type because of a conflicting previous type cast
LINE 1: ...US VIEW cqanalyze25 AS SELECT id::integer AS id0, id::text A...
                                                             ^
-- Another untyped column with an aliased stream
CREATE CONTINUOUS VIEW cqanalyze26 AS SELECT s.id FROM analyze_cont_stream s WHERE s.id < 10;
ERROR:  column reference "s.id" has an ambiguous type
LINE 1: CREATE CONTINUOUS VIEW cqanalyze26 AS SELECT s.id FROM analy...
                                                     ^
HINT:  Explicitly cast to the desired type, e.g. s.id::integer, or create the stream "analyze_cont_stream" with CREATE STREAM.
-- Verify that NOTICEs are properly shown when joining on unindexed columns
CREATE TABLE tnotice (x integer, y integer);
CREATE CONTINUOUS VIEW cvnotice0 AS SELECT stream.x::integer FROM analyze_cont_stream2 JOIN tnotice ON stream.x = tnotice.x;
ERROR:  missing FROM-clause entry for table "stream"
LINE 1: ...integer FROM analyze_cont_stream2 JOIN tnotice ON stream.x =...
                                                             ^
-- tnotice.x NOTICE should only be shown once
CREATE CONTINUOUS VIEW cvnotice1 AS SELECT stream.x::integer FROM analyze_cont_stream2 JOIN tnotice ON stream.x = tnotice.x AND stream.x = tnotice.x;
ERROR:  missing FROM-clause entry for table "stream"
LINE 1: ...integer FROM analyze_cont_stream2 JOIN tnotice ON stream.x =...
                                                             ^
CREATE CONTINUOUS VIEW cvnotice2 AS SELECT stream.x::integer FROM analyze_cont_stream2, tnotice WHERE tnotice.x = stream.x;
ERROR:  missing FROM-clause entry for table "stream"
LINE 1: CREATE CONTINUOUS VIEW cvnotice2 AS SELECT stream.x::integer...
                                                   ^
CREATE INDEX tnotice_idx ON tnotice(x);
-- No NOTICE should be given now that an index exists
CREATE CONTINUOUS VIEW cvnotice3 AS SELECT stream.x::integer FROM analyze_cont_stream, tnotice WHERE tnotice.x = stream.x;
ERROR:  missing FROM-clause entry for table "stream"
LINE 1: CREATE CONTINUOUS VIEW cvnotice3 AS SELECT stream.x::integer...
                                                   ^
DROP TABLE tnotice;
-- Verify all relevant types are recognized
CREATE CONTINUOUS VIEW cqanalyze27 AS SELECT
a::bigint,
b::bit[2],
c::varbit(5),
d::boolean,
c0::box,
d0::bytea,
e::char(42),
f::varchar(32),
g::cidr,
h::circle,
i::date,
j::float8,
k::inet,
l::integer,
m::json,
n::jsonb,
o::line,
p::lseg,
q::macaddr,
r::money,
s::numeric(1, 1),
t::path,
u::point,
v::polygon,
w::real,
x::smallint,
y::text,
z::time,
aa::timetz,
bb::timestamp,
cc::timestamptz,
dd::tsquery,
ee::tsvector,
ff::uuid,
gg::xml
FROM analyze_cont_stream2 WHERE aa > '2014-01-01 00:00:00' AND n @> '{"key": "value"}'::jsonb AND r > 42.3::money;
-- Verify that type cast for arrival_timestamp is optional
CREATE STREAM test_stream ();
CREATE CONTINUOUS VIEW cqanalyze28 AS SELECT arrival_timestamp FROM test_stream;
CREATE CONTINUOUS VIEW cqanalyze29 AS SELECT key::text, arrival_timestamp FROM test_stream;
CREATE CONTINUOUS VIEW cqanalyze30 AS SELECT key::text FROM test_stream WHERE arrival_timestamp < TIMESTAMP '2004-10-19 10:23:54+02';
CREATE CONTINUOUS VIEW cqanalyze31 AS SELECT key::text, arrival_timestamp::timestamptz FROM test_stream;
-- Verify that we can't do wildcard selections in continuous queries
CREATE STREAM stream ();
CREATE CONTINUOUS VIEW cqanalyze32 AS SELECT * from stream;
ERROR:  can't select "*" in continuous queries
LINE 1: CREATE CONTINUOUS VIEW cqanalyze32 AS SELECT * from stream;
                                                     ^
HINT:  Explicitly state the columns you want to SELECT.
CREATE CONTINUOUS VIEW cqanalyze33 AS SELECT * from stream, t0;
ERROR:  can't select "*" in continuous queries
LINE 1: CREATE CONTINUOUS VIEW cqanalyze33 AS SELECT * from stream, ...
                                                     ^
HINT:  Explicitly state the columns you want to SELECT.
CREATE STREAM cqanalyze_wc_stream (x integer);
CREATE CONTINUOUS VIEW cqanalyze33 AS SELECT * from cqanalyze_wc_stream;
ERROR:  can't select "*" in continuous queries
LINE 1: CREATE CONTINUOUS VIEW cqanalyze33 AS SELECT * from cqanalyz...
                                                     ^
HINT:  Explicitly state the columns you want to SELECT.
CREATE CONTINUOUS VIEW cqanalyze34 AS SELECT t0.* from stream, t0;
ERROR:  can't select "t0.*" in continuous queries
LINE 1: CREATE CONTINUOUS VIEW cqanalyze34 AS SELECT t0.* from strea...
                                                     ^
HINT:  Explicitly state the columns you want to SELECT.
CREATE CONTINUOUS VIEW cqanalyze35 AS SELECT stream.* from stream, t0;
ERROR:  can't select "stream.*" in continuous queries
LINE 1: CREATE CONTINUOUS VIEW cqanalyze35 AS SELECT stream.* from s...
                                                     ^
HINT:  Explicitly state the columns you want to SELECT.
-- Disallow sorting streams
CREATE CONTINUOUS VIEW cqanalyze36 AS SELECT key::text from stream ORDER BY key;
ERROR:  continuous queries don't support ORDER BY
CREATE CONTINUOUS VIEW cqanalyze37 AS SELECT key::text from stream ORDER BY arrival_time;
ERROR:  continuous queries don't support ORDER BY
-- Sliding window queries
CREATE CONTINUOUS VIEW cqanalyze38 AS SELECT COUNT(*) FROM analyze_cont_stream WHERE arrival_timestamp > clock_timestamp() - interval '1 hour';
CREATE CONTINUOUS VIEW cqanalyze39 AS SELECT COUNT(*) FROM analyze_cont_stream WHERE arrival_timestamp > clock_timestamp() - interval '1 hour' AND key::text='pipelinedb';
CREATE CONTINUOUS VIEW cqanalyze40 AS SELECT COUNT(*) FROM analyze_cont_stream WHERE NOT arrival_timestamp > clock_timestamp() - interval '1 hour';
ERROR:  clock_timestamp() may only appear as a top-level conjunction predicate
LINE 1: ...analyze_cont_stream WHERE NOT arrival_timestamp > clock_time...
                                                             ^
CREATE CONTINUOUS VIEW cqanalyze41 AS SELECT COUNT(*) FROM analyze_cont_stream WHERE arrival_timestamp > clock_timestamp() - interval '1 hour' OR key::text='pipelinedb';
ERROR:  clock_timestamp() may only appear as a top-level conjunction predicate
LINE 1: ...ROM analyze_cont_stream WHERE arrival_timestamp > clock_time...
                                                             ^
CREATE CONTINUOUS VIEW cqanalyze42 AS SELECT COUNT(*) FROM analyze_cont_stream WHERE arrival_timestamp > clock_timestamp() - interval '1 hour' AND arrival_timestamp > clock_timestamp() - interval '5 hour';
ERROR:  clock_timestamp() may only appear once in a WHERE clause
LINE 1: ...amp() - interval '1 hour' AND arrival_timestamp > clock_time...
                                                             ^
-- Hypothetical-set aggregates
CREATE STREAM analyze_cont_stream3 ();
CREATE CONTINUOUS VIEW cqanalyze45 AS SELECT g::integer, percent_rank(1 + 3, 2, substring('xxx', 1, 2)) WITHIN GROUP (ORDER BY x::integer, y::integer, z::text) + rank(4, 5, 'x') WITHIN GROUP (ORDER BY x, y, substring(z, 1, 2))  FROM analyze_cont_stream3 GROUP BY g;
CREATE CONTINUOUS VIEW cqanalyze46 AS SELECT rank(0, 1) WITHIN GROUP (ORDER BY x::integer, y::integer) + rank(0) WITHIN GROUP (ORDER BY x) FROM analyze_cont_stream3;
-- Number of arguments to HS function is inconsistent with the number of GROUP columns
CREATE CONTINUOUS VIEW error_not_created AS SELECT percent_rank(1) WITHIN GROUP (ORDER BY x::integer, y::integer, z::integer) FROM analyze_cont_stream;
ERROR:  function percent_rank(integer, integer, integer, integer) does not exist
LINE 1: ...REATE CONTINUOUS VIEW error_not_created AS SELECT percent_ra...
                                                             ^
HINT:  To use the hypothetical-set aggregate percent_rank, the number of hypothetical direct arguments (here 1) must match the number of ordering columns (here 3).
-- Types of arguments to HS function are inconsistent with GROUP column types
CREATE CONTINUOUS VIEW error_not_created AS SELECT g::integer, dense_rank(2, 3, 4) WITHIN GROUP (ORDER BY x::integer, y::integer, z::text) FROM analyze_cont_stream GROUP BY g;
ERROR:  WITHIN GROUP types text and integer cannot be matched
LINE 1: ...ot_created AS SELECT g::integer, dense_rank(2, 3, 4) WITHIN ...
                                                             ^
CREATE STREAM analyze_cont_stream4 ();
CREATE CONTINUOUS VIEW cqanalyze47 AS SELECT g::integer, rank(2, 3, 4) WITHIN GROUP (ORDER BY x::integer, y::integer, z::integer), sum(x + y + z) FROM analyze_cont_stream4 GROUP BY g;
-- Sliding windows
CREATE CONTINUOUS VIEW cqanalyze48 AS SELECT cume_dist(2) WITHIN GROUP (ORDER BY x::integer DESC) FROM analyze_cont_stream3 WHERE (arrival_timestamp > clock_timestamp() - interval '5 minutes');
CREATE CONTINUOUS VIEW cqanalyze49 AS SELECT percent_rank(2) WITHIN GROUP (ORDER BY x::integer DESC), rank(2) WITHIN GROUP (ORDER BY x) FROM analyze_cont_stream3 WHERE (arrival_timestamp > clock_timestamp() - interval '5 minutes');
-- Verify that we get an error if we try to create a CV that only selects from tables
CREATE TABLE cqanalyze_table (id integer);
CREATE CONTINUOUS VIEW error_not_created AS SELECT cqanalyze_table.id::integer FROM cqanalyze_table;
ERROR:  continuous queries must include a stream in the FROM clause
LINE 1: ...reated AS SELECT cqanalyze_table.id::integer FROM cqanalyze_...
                                                             ^
HINT:  To include a relation in a continuous query, JOIN it with a stream.
DROP TABLE cqanalyze_table;
-- Verify that for stream-table joins, the correct error message is generated when the table is missing
CREATE STREAM not_a_table ();
CREATE CONTINUOUS VIEW  error_not_created AS SELECT s.id::integer, t.tid FROM analyze_cont_stream s JOIN not_a_table t ON s.id = t.tid;
ERROR:  continuous queries don't support stream-stream JOINs
LINE 1: ...d::integer, t.tid FROM analyze_cont_stream s JOIN not_a_tabl...
                                                             ^
HINT:  If t is supposed to be a relation, create it first with CREATE TABLE.
CREATE CONTINUOUS VIEW  error_not_created AS SELECT s.id::integer, tid FROM analyze_cont_stream s JOIN not_a_table ON s.id = tid;
ERROR:  continuous queries don't support stream-stream JOINs
LINE 1: ....id::integer, tid FROM analyze_cont_stream s JOIN not_a_tabl...
                                                             ^
HINT:  If not_a_table is supposed to be a relation, create it first with CREATE TABLE.
-- Ordered-set aggregates
CREATE STREAM analyze_cont_stream5 ();
CREATE CONTINUOUS VIEW cqanalyze50 AS SELECT g::integer, percentile_cont(ARRAY[0.2, 0.8]) WITHIN GROUP (ORDER BY x::float), percentile_cont(0.9) WITHIN GROUP (ORDER BY y::integer) + percentile_cont(0.1) WITHIN GROUP (ORDER BY z::numeric) AS col FROM analyze_cont_stream5 GROUP BY g;
CREATE CONTINUOUS VIEW cqanalyze51 AS SELECT g::integer, percentile_cont(0.1) WITHIN GROUP (ORDER BY x::float + y::integer) FROM analyze_cont_stream3 GROUP BY g;
-- Can only sort on a numeric expression
CREATE CONTINUOUS VIEW error_not_created AS SELECT percentile_cont(0.1) WITHIN GROUP (ORDER BY x::text) FROM analyze_cont_stream;
ERROR:  function percentile_cont(numeric, text) does not exist
LINE 1: ...REATE CONTINUOUS VIEW error_not_created AS SELECT percentile...
                                                             ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- Sliding windows
CREATE STREAM analyze_cont_stream6 ();
CREATE CONTINUOUS VIEW cqanalyze52 AS SELECT g::integer, percentile_cont(ARRAY[0.2, 0.8]) WITHIN GROUP (ORDER BY x::float), percentile_cont(0.9) WITHIN GROUP (ORDER BY y::integer) + percentile_cont(0.1) WITHIN GROUP (ORDER BY z::numeric) AS col FROM analyze_cont_stream6 WHERE (arrival_timestamp > clock_timestamp() - interval '5 minutes') GROUP BY g;
CREATE CONTINUOUS VIEW cqanalyze53 AS SELECT percentile_cont(0.1) WITHIN GROUP (ORDER BY x::float + y::integer) FROM analyze_cont_stream3 WHERE (arrival_timestamp > clock_timestamp() - interval '5 minutes');
CREATE CONTINUOUS VIEW funcs AS SELECT floor(x::float8), date_trunc('day', arrival_timestamp), COUNT(*) FROM stream GROUP BY floor, date_trunc;
DROP TABLE t0 CASCADE;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to continuous view cqanalyze16
drop cascades to continuous view cqanalyze17
DROP STREAM s0 CASCADE;
DROP STREAM s1 CASCADE;
DROP STREAM stream CASCADE;
NOTICE:  drop cascades to continuous view funcs
DROP STREAM not_a_table CACADE;
ERROR:  syntax error at or near "CACADE"
LINE 1: DROP STREAM not_a_table CACADE;
                                ^
DROP STREAM analyze_cont_stream CASCADE;
NOTICE:  drop cascades to 12 other objects
DETAIL:  drop cascades to continuous view cqanalyze0
drop cascades to continuous view cqanalyze1
drop cascades to continuous view cqanalyze2
drop cascades to continuous view cqanalyze3
drop cascades to continuous view cqanalyze5
drop cascades to continuous view cqanalyze6
drop cascades to continuous view cqanalyze8
drop cascades to continuous view cqanalyze10
drop cascades to continuous view cqanalyze11
drop cascades to continuous view cqanalyze12
drop cascades to continuous view cqanalyze38
drop cascades to continuous view cqanalyze39
DROP STREAM analyze_cont_stream2 CASCADE;
NOTICE:  drop cascades to continuous view cqanalyze27
DROP STREAM analyze_cont_stream3 CASCADE;
NOTICE:  drop cascades to 6 other objects
DETAIL:  drop cascades to continuous view cqanalyze45
drop cascades to continuous view cqanalyze46
drop cascades to continuous view cqanalyze48
drop cascades to continuous view cqanalyze49
drop cascades to continuous view cqanalyze51
drop cascades to continuous view cqanalyze53
DROP STREAM analyze_cont_stream4 CASCADE;
NOTICE:  drop cascades to continuous view cqanalyze47
DROP STREAM analyze_cont_stream5 CASCADE;
NOTICE:  drop cascades to continuous view cqanalyze50
DROP STREAM analyze_cont_stream6 CASCADE;
NOTICE:  drop cascades to continuous view cqanalyze52
-- Regression
CREATE STREAM analyze_cont_stream ();
CREATE CONTINUOUS VIEW cqregress1 AS SELECT id::integer + avg(id) FROM analyze_cont_stream GROUP BY id;
CREATE CONTINUOUS VIEW cqregress2 AS SELECT date_trunc('hour', ts) AS ts FROM analyze_cont_stream;
ERROR:  column reference "ts" has an ambiguous type
LINE 1: ...UOUS VIEW cqregress2 AS SELECT date_trunc('hour', ts) AS ts ...
                                                             ^
HINT:  Explicitly cast to the desired type, e.g. ts::integer, or create the stream "analyze_cont_stream" with CREATE STREAM.
CREATE CONTINUOUS VIEW cqregress3 AS SELECT stream.sid::integer FROM analyze_cont_stream;
ERROR:  missing FROM-clause entry for table "stream"
LINE 1: CREATE CONTINUOUS VIEW cqregress3 AS SELECT stream.sid::inte...
                                                    ^
CREATE CONTINUOUS VIEW cqregress4 AS SELECT x::int FROM cqregress4;
ERROR:  relation "cqregress4" does not exist
CREATE CONTINUOUS VIEW cqregress5 AS SELECT count(DISTINCT x::int), percentile_cont(0.1) WITHIN GROUP (ORDER BY x) FROM analyze_cont_stream;
\d+ cqregress5
                  Continuous view "public.cqregress5"
     Column      |       Type       | Modifiers | Storage | Description 
-----------------+------------------+-----------+---------+-------------
 count           | bigint           |           | plain   | 
 percentile_cont | double precision |           | plain   | 
View definition:
 SELECT count(DISTINCT x::integer) AS count,
    percentile_cont(0.1::double precision) WITHIN GROUP (ORDER BY x::integer::double precision) AS percentile_cont
   FROM ONLY analyze_cont_stream;

DROP STREAM analyze_cont_stream CASCADE;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to continuous view cqregress1
drop cascades to continuous view cqregress5
